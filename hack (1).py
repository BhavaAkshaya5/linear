# -*- coding: utf-8 -*-
"""Hack.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xu6kPHXiuw9onGM1Hoj7SffP-U31K13J
"""

import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
import pickle

sc = pd.read_csv('Final Exam Score (1).csv')


sc.head()

sc.isnull().sum()

sc.dropna(inplace=True)

sc.isnull().sum()

sc.info()

from sklearn.preprocessing import LabelEncoder
x=LabelEncoder()
sc['Enter_Your_Name']=x.fit_transform(sc['Enter Your Name'])

x1=LabelEncoder()
sc['Usage of mobile phone while studying']=x.fit_transform(sc['Usage of mobile phone while studying'])

x2=LabelEncoder()
sc['Participation in doubt sessions']=x.fit_transform(sc['Participation in doubt sessions'])

sc.tail()

LR=LinearRegression()

# Clean percentage column
sc['Percentage of Attendance'] = sc['Percentage of Attendance'].str.replace('%', '').astype(float)

# Define input and output variables
ind = sc[['Enter_Your_Name', 'What is the dialy hours of study?', 'Usage of mobile phone while studying',
          'Sleep Hours before exam?', 'Percentage of Attendance', 'Participation in doubt sessions']]
dep = sc['Final Score']

# Fit the model
LR.fit(ind, dep)

with open('/content/Final_scorepickle.pkl','wb') as f:
  pickle.dump(LR,f)
print("model trained and saved as 'Final_Score.pkl'")

LR.predict([[25,5,3,8,80,1]])

from sklearn.metrics import mean_squared_error
val=LR.predict(ind)
# Use a regression metric like mean_squared_error
# You can choose other regression metrics like mean_absolute_error or r2_score
mse = mean_squared_error(dep, val)
print(f"Mean Squared Error: {mse}")

n=int(input("Enter_Your_Name"))
hr=int(input("What is the dialy hours of study?"))
mo=int(input("Usage of mobile phone while studying"))
sl=int(input("Sleep Hours before exam?"))
at=int(input("Percentage of Attendance"))
d=int(input("Participation in doubt sessions"))

ans=LR.predict([[n,hr,mo,sl,at,d]])
ans

import joblib
joblib.dump(LR, '/content/Final_scorepickle.pkl')

import streamlit as st
import pandas as pd
import joblib

# Load the trained model
model = joblib.load("model.pkl")  # Ensure 'model.pkl' is present in the same directory

# Streamlit page setup
st.set_page_config(
    page_title="🎓 Final Score Predictor",
    layout="centered"
)

# CSS for styling
st.markdown("""
    <style>
        body {
            background-image: url("https://images.unsplash.com/photo-1557683316-973673baf926");
            background-size: cover;
        }
        .main {
            background-color: rgba(255, 255, 255, 0.90);
            padding: 2rem;
            border-radius: 15px;
            box-shadow: 0 0 10px rgba(0,0,0,0.3);
        }
        .stButton > button {
            background-color: #0d6efd;
            color: white;
            padding: 0.5em 2em;
            border-radius: 8px;
            transition: 0.3s;
        }
        .stButton > button:hover {
            background-color: #003566;
            color: white;
        }
    </style>
""", unsafe_allow_html=True)

with st.container():
    st.markdown("<div class='main'>", unsafe_allow_html=True)

    st.title("🎓 Student Final Score Predictor")
    st.write("Fill in the details to predict the final exam score.")

    # Input fields
    name_encoded = st.number_input("👤 Encoded Name (e.g., 25)", min_value=0, max_value=100, step=1)
    study_hours = st.slider("📚 Daily Study Hours", 0, 15, 2)
    mobile_encoded = st.number_input("📱 Mobile Usage While Studying (Encoded)", min_value=0, max_value=10, step=1)
    sleep_hours = st.slider("😴 Sleep Hours Before Exam", 0, 12, 6)
    attendance_str = st.text_input("📅 Attendance Percentage (e.g., 85%)", "85%")
    doubt_encoded = st.radio("❓ Doubt Session Participation (Encoded)", [0, 1], format_func=lambda x: "Yes" if x == 1 else "No")

    try:
        # Clean and convert attendance
        attendance = float(attendance_str.strip('%'))

        # Prepare input
        input_df = pd.DataFrame([[
            name_encoded, study_hours, mobile_encoded, sleep_hours, attendance, doubt_encoded
        ]], columns=[
            'Enter_Your_Name',
            'What is the dialy hours of study?',
            'Usage of mobile phone while studying',
            'Sleep Hours before exam?',
            'Percentage of Attendance',
            'Participation in doubt sessions'
        ])

        if st.button("🎯 Predict Final Score"):
            prediction = model.predict(input_df)[0]
            st.success(f"✅ Predicted Final Score: **{prediction:.2f}**")

    except ValueError:
        st.error("⚠️ Please enter a valid percentage value for attendance.")

    st.markdown("</div>", unsafe_allow_html=True)
